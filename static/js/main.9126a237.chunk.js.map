{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedUserId","setSelectedUserId","useState","visibleTodos","setVisibleTodos","filterByTitle","setFilterByTitle","filterByComplited","setFilterByComplited","useEffect","filter","todo","filtredTodos","title","toLowerCase","includes","completed","className","type","value","onChange","e","target","onClick","sort","Math","random","map","classNames","checked","readOnly","userId","id","request","url","a","fetch","response","json","CurrentUser","currentUser","setCurrentUser","selectUser","useCallback","Error","name","email","phone","App","setUserId","setTodos","loadTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9126a237.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport { Todo } from '../Types/Types';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[],\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos, selectedUserId, setSelectedUserId,\n}) => {\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [filterByTitle, setFilterByTitle] = useState('');\n  const [filterByComplited, setFilterByComplited] = useState('all');\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const filtredTodos = todo.title.toLowerCase().includes(filterByTitle);\n\n      switch (filterByComplited) {\n        case 'all':\n          return filtredTodos;\n\n        case 'active':\n          return filtredTodos && !todo.completed;\n\n        case 'completed':\n          return filtredTodos && todo.completed;\n\n        default:\n          return 0;\n      }\n    }));\n  }, [filterByTitle, todos, filterByComplited]);\n\n  const titleFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterByTitle(e.target.value.toLowerCase());\n  };\n\n  const completedFilter = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterByComplited(e.target.value);\n  };\n\n  const getRandom = () => {\n    setVisibleTodos([...visibleTodos].sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <label>\n          Filter by title:\n          <input\n            type=\"text\"\n            data-cy=\"filterByTitle\"\n            value={filterByTitle}\n            onChange={titleFilter}\n          />\n        </label>\n\n        <select value={filterByComplited} onChange={completedFilter}>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={getRandom}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <ol className=\"TodoList__list\" data-cy=\"listOfTodos\">\n        {visibleTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <label>\n              <input type=\"checkbox\" checked={todo.completed} readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames('TodoList__user-button', 'button',\n                {\n                  'TodoList__user-button--selected':\n                  selectedUserId === todo.userId,\n                })}\n              type=\"button\"\n              data-cy=\"userButton\"\n              onClick={() => setSelectedUserId(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n});\n","import { Todo, User } from '../components/Types/Types';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return request(`/users/${userId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport { User } from '../Types/Types';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: (id: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const selectUser = useCallback(async () => {\n    try {\n      setCurrentUser(await getUser(selectedUserId));\n    } catch (error) {\n      throw new Error(`${error}`);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    selectUser();\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${selectedUserId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => setSelectedUserId(0)}\n            className=\"CurrentUser__clear button\"\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n});\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './components/Types/Types';\n\nconst App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = useCallback(async () => {\n    setTodos(await getTodos());\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={userId}\n          setSelectedUserId={setUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId ? (\n            <CurrentUser\n              selectedUserId={userId}\n              setSelectedUserId={setUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}